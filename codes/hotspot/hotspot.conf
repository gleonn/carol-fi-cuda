[DEFAULT]

debug =True 

# Name of the gdb executable
gdbExecName = /usr/local/cuda-10.1.243/bin/cuda-gdb 

# Which fault model to use, 0 -> single; 1 -> double;
# 2 -> random; 3 -> zeros; 4 -> least 16 significant bits (LSB);
# 5 -> least 8 significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_composed -> Instruction Adress (NOT IMPLEMENTED YET)

injectionSite = RF 
# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# binary file of the application
# Must be full path
benchmarkBinary = /home/badia/mycarol-fi/codes/hotspot/hotspot



# Commands to set the session inside GDB environment
benchmarkArgs =  1024  2 10000  /home/badia/mycarol-fi/data/hotspot/temp_1024  /home/badia/mycarol-fi/data/hotspot/power_1024 output.out

benchmarkArgs_noverificar =  1024  2 10000  /home/badia/mycarol-fi/data/hotspot/temp_1024  /home/badia/mycarol-fi/data/hotspot/power_1024 output.out

# CSV output file. It will be overwrite at each injection
csvFile = results/hotspot_RF.csv

# You should create a script on the benchmark source folder to verify GOLD_OUTPUT x INJ_OUTPUT
goldenCheckScript = codes/hotspot/sdc_check.sh

# Number of signals that will be sent to the application
seqSignals = 2 

# Initial sleep time in seconds before start sending signals
# Generally the memory setup time
initSleep = 0.56 
kernels= compute_temp
section_begin=hotspot.cu:247
section_end=hotspot.cu:257
